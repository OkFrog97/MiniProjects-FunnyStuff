"""
Wiki:
Iterator — поведенческий шаблон проектирования. Представляет собой объект,
позволяющий получить последовательный доступ к элементам объекта-агрегата
без использования описаний каждого из агрегированных объектов.
"""


class MyIterator:
    def __init__(self, iterable):
        self.index = 0 # перст наш, на конкретный элемент последовательности в ручном режиме цифиркой указывающий
        self.iterable = iterable # итерабле - перечеслимый объект: список, строка, словарь или множество

    def __next__(self):
        if self.index < len(self.iterable): # Если индекс, т.е. позиция элемента, на который мы указываем, в настоящий момент меньше длинны инерируемого объекта:
            self.index += 1 # передвигаем перст (если поставить после ретерна, код не выполнится)
            return self.iterable[self.index-1] #вернуть элемент, на который мы указывали до передвижения перста)
        else:
            raise StopIteration # станавливаем итерацию


class MyList:
    """
    Прост класс для примера того, как работает инетарция.
    UPD v.0.1: А теперь сделаем из него еще и итератор!
    UPD v.0.2: Добавим-ка ЛОГИКИ! (годно только для коллекций с числами)
    """
    def __init__(self, it):
        self.it = it
        self.index = 0 # Переносим перст судьбы

    def __iter__(self):
        return self # возвращает какой-то элемент последовательности, с версии 0.1 указывает на сам себя, а не на отдельный класс.
    

    def __next__(self):
        if self.index < len(self.it):
            self.index += 1
            return self.it[self.index-1] / 2 # Добавили деление на два.
        else:
            raise StopIteration


def main():

    someIterableObjectList = MyList([0, 1, 2, 3, 4, 5]) #Итерируемый объект с листом
    #someIterableObjectStr = MyList("I'a a banana!") #Интерируемый объект со строкой

    # У нас два объекта-итератора, которые могут вывести нам элементы (части) того, что мы туда сунули

    for obj in someIterableObjectList:
        print(obj)

    print("------HAKUNA MATATA------\n\n")

    #for obj in someIterableObjectStr:
        #print(obj)

    # Итератор возвращает объекты по одному, передвигая счестчик (индекс - перст судьбы) в МайИтераторе каждый раз, когда элемент возвращается
    # ОП. ОП, ЖаСоль Алехандро! Теперь наш класс MyList еще и итератор, нам не нужен МайИтератор, азазазазаза!
    


if __name__ == "__main__":
    main()

    
    
